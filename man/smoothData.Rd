% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MS_functional.R
\name{smoothData}
\alias{smoothData}
\title{smoothData}
\usage{
smoothData(
  data,
  smoothFunction = smoothFunction.loess(),
  interval = 100,
  step = 10,
  keepMinimumZero = TRUE,
  verbose = FALSE,
  returnInfo = FALSE,
  xtraInfo = list()
)
}
\arguments{
\item{data}{a data.frame with data to be smoothed}

\item{smoothFunction}{specifies the smoothing function to be used. Uses the
standard \link[MS.Analysis]{smoothFunction.loess} function by default.
Important is to pass the correct column names onto the smoothing function}

\item{interval}{specifies how many data points are to be used per smoothing
action; default = 100, if NA then will be set to the number of rows of the
data}

\item{step}{step with which to shift the window of datapoints to be used
after a smoothing action. Default = 10, if interval is NA, then the steps
are set to 1}

\item{keepMinimumZero}{logical vector, default: TRUE. This prevents
smoothed data points from becoming less than zero.}

\item{verbose}{logical vector, default FALSE. If TRUE, then the function
shows a text progress bar}

\item{returnInfo}{if the data is to be returned as a function that generates
a dataElement object (which can be used to put in an dataInfo object) via
the 'readData' function}

\item{xtraInfo}{extra info to be added to the info part in the form of a
named list}
}
\value{
a data.frame of the smoothed data or a dataElement object
}
\description{
Actual smoothing function: uses the smoothFunction parameter to
smoothen the data
}
\note{
by default the smoothing function moves along the data using 'interval'
data points and then shifting 'step' data points for the next smoothing. It
more or less is the idea of a moving average
}
\examples{
set.seed(1234)
df <- data.frame(
  x = seq(0, 25, by = 0.1)
)
df$y <- 1 + 5 * sin(df$x) + rnorm(251)
plot(df, type = "l")
plot(smoothFunction.loess(x = "x", y = "y")(df), type = "l")
plot(
  smoothData(
    data = df,
    smoothFunction = smoothFunction.loess(x = "x", y = "y")
  ),
  type = "l"
)
plot(
  smoothData(
    data = df,
    smoothFunction = smoothFunction.loess(x = "x", y = "y", span = 0.2),
    interval = 40,
    step = 5
  ),
  type = "l"
)
plot(
  smoothData(
    data = df,
    smoothFunction = smoothFunction.loess(x = "x", y = "y", span = 0.2),
    interval = 40,
    step = 5,
    keepMinimumZero = FALSE
  ),
  type = "l"
)
plot(
  smoothData(
    data = df,
    smoothFunction = smoothFunction.loess(x = "x", y = "y", span = 0.2),
    interval = 40,
    step = 20
  ),
  type = "l"
)
plot(
  smoothData(
    data = df,
    smoothFunction = smoothFunction.loess(x = "x", y = "y", span = 0.2),
    interval = 100,
    step = 50,
    keepMinimumZero = FALSE
  ),
  type = "l"
)
result <- smoothData(
  data = df,
  smoothFunction = smoothFunction.loess(x = "x", y = "y", span = 0.2),
  interval = 100,
  step = 50,
  keepMinimumZero = FALSE,
  returnInfo = TRUE
)()
result
result$data |> head()
plot(result$data, type = "l")

}
